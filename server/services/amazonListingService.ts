import { eq, desc } from "drizzle-orm";
import { db } from "../db";
import { amazonListingSessions, agents, agentUsage, agentGenerations, aiGenerationLogs } from "@shared/schema";
import type { InsertAmazonListingSession, AmazonListingSession } from "@shared/schema";
import { aiProviderService } from "./aiProviderService";

import { storage } from "../storage";
import crypto from "crypto";

export class AmazonListingService {
  
  // Fun√ß√£o auxiliar para salvar logs de IA
  async saveAiGenerationLog(
    userId: number,
    feature: string,
    prompt: string,
    response: string,
    provider: string = "openai",
    model: string = "gpt-4o-mini",
    inputTokens: number = 0,
    outputTokens: number = 0,
    totalTokens: number = 0,
    cost: number = 0,
    duration: number = 0
  ): Promise<void> {
    try {
      const logData = {
        userId,
        provider,
        model,
        prompt: prompt.substring(0, 5000), // Limitar tamanho do prompt
        response: response.substring(0, 10000), // Limitar tamanho da resposta
        promptCharacters: prompt.length,
        responseCharacters: response.length,
        inputTokens,
        outputTokens,
        totalTokens,
        cost: cost.toString(),
        duration,
        feature
      };

      await db.insert(aiGenerationLogs).values(logData);
      
      console.log(`üíæ [AI_LOG] Amazon Listing - ${feature} saved for user ${userId}`);
    } catch (error) {
      console.error(`‚ùå [AI_LOG] Error saving Amazon Listing log:`, error);
    }
  }

  // Criar nova sess√£o
  async createSession(idUsuario: string): Promise<AmazonListingSession> {
    const sessionData: InsertAmazonListingSession = {
      idUsuario,
      status: 'active',
      currentStep: 0
    };

    const [session] = await db.insert(amazonListingSessions).values(sessionData).returning();
    return session;
  }

  // Atualizar dados da sess√£o
  async updateSessionData(sessionId: string, data: Partial<InsertAmazonListingSession>): Promise<AmazonListingSession> {
    console.log('üìù updateSessionData called:', { 
      sessionId, 
      dataKeys: Object.keys(data),
      bulletPointsData: data.bulletPoints ? data.bulletPoints.substring(0, 50) + '...' : 'n√£o enviado'
    });
    
    try {
      const [session] = await db
        .update(amazonListingSessions)
        .set({ 
          ...data, 
          dataHoraUpdated: new Date() 
        })
        .where(eq(amazonListingSessions.id, sessionId))
        .returning();
      
      console.log('üíæ updateSessionData result:', { 
        sessionId, 
        bulletPointsUpdated: !!session?.bulletPoints,
        bulletPointsLength: session?.bulletPoints?.length || 0,
        sessionReturned: !!session
      });
      
      return session;
    } catch (error) {
      console.error('‚ùå Erro no updateSessionData:', error);
      throw error;
    }
  }

  // Buscar sess√£o por ID
  async getSession(sessionId: string): Promise<AmazonListingSession | null> {
    const [session] = await db
      .select()
      .from(amazonListingSessions)
      .where(eq(amazonListingSessions.id, sessionId))
      .limit(1);
    
    console.log('üîç DEBUG - getSession result:', {
      sessionId,
      found: !!session,
      reviewsInsight: !!session?.reviewsInsight,
      titulos: !!session?.titulos,
      bulletPoints: !!session?.bulletPoints,
      currentStep: session?.currentStep,
      status: session?.status
    });
    
    return session || null;
  }

  // Processar Etapa 1: An√°lise de Avalia√ß√µes
  async processStep1_AnalysisReviews(sessionId: string): Promise<string> {
    const startTime = Date.now();
    
    console.log('üîç Buscando sess√£o:', sessionId);
    const session = await this.getSession(sessionId);
    console.log('üîç Sess√£o encontrada:', !!session, session?.id);
    
    if (!session) {
      // Tentar busca direta no banco para debug
      const [directSearch] = await db.select().from(amazonListingSessions).where(eq(amazonListingSessions.id, sessionId));
      console.log('üîç Busca direta no banco:', !!directSearch, directSearch?.id);
      throw new Error('Sess√£o n√£o encontrada');
    }

    // Atualizar status
    await this.updateSessionData(sessionId, { 
      status: 'processing', 
      currentStep: 1 
    });

    // Montar prompt da Etapa 1 conforme especifica√ß√£o
    const prompt = this.buildAnalysisPrompt(session.reviewsData || '');

    try {
      // Buscar agente Amazon Listings
      const [agent] = await db
        .select()
        .from(agents)
        .where(eq(agents.id, 'agent-amazon-listings'))
        .limit(1);

      if (!agent) throw new Error('Agente Amazon Listings n√£o encontrado');

      // Preparar dados de entrada para o Prompt 1
      const prompt1Input = {
        sessionId,
        prompt,
        model: "gpt-4o-mini",
        temperature: 0.7,
        maxTokens: 2000,
        messages: [
          {
            role: "system",
            content: "Voc√™ √© um especialista em an√°lise de avalia√ß√µes de produtos para otimiza√ß√£o de listings da Amazon."
          },
          {
            role: "user", 
            content: prompt
          }
        ],
        timestamp: new Date().toISOString(),
        provider: "openai"
      };

      // Chamada real para a IA usando AIProviderService
      const analysisResponse = await aiProviderService.generateResponse({
        provider: "openai",
        model: agent.model || "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: "Voc√™ √© um especialista em an√°lise de avalia√ß√µes da Amazon que identifica padr√µes de comportamento do consumidor."
          },
          {
            role: "user", 
            content: prompt
          }
        ],
        temperature: 0.7,
        maxTokens: 3000
      });
      
      const analysisResult = analysisResponse.content;

      const duration = Date.now() - startTime;
      
      // Salvar log da Etapa 1 - An√°lise de Avalia√ß√µes
      await this.saveAiGenerationLog(
        parseInt(session.idUsuario),
        "amazon-listing-step1-analysis",
        prompt,
        analysisResult,
        "openai",
        agent.model || "gpt-4o-mini",
        1520, // input tokens estimado
        950,  // output tokens estimado
        2470, // total tokens
        0.002470, // custo estimado
        duration
      );

      // Salvar an√°lise na sess√£o  
      await this.updateSessionData(sessionId, { 
        reviewsInsight: analysisResult,
        status: 'step1_completed'
      });

      // Simular resposta completa do AI provider (formato OpenAI)
      const prompt1Output = {
        id: `chatcmpl-${Date.now()}`,
        object: "chat.completion",
        created: Math.floor(Date.now() / 1000),
        model: "gpt-4o-mini",
        choices: [{
          index: 0,
          message: {
            role: "assistant",
            content: analysisResult
          },
          finish_reason: "stop"
        }],
        usage: {
          prompt_tokens: 1520,
          completion_tokens: 950,
          total_tokens: 2470
        },
        system_fingerprint: `fp_${Date.now()}`
      };

      // Criar registro de usage para tracking de custos
      const usageId = crypto.randomUUID();
      await storage.createAgentUsage({
        id: usageId,
        agentId: agent.id.toString(),
        userId: session.idUsuario,
        userName: "Sistema",
        inputTokens: 1520,
        outputTokens: 950,
        totalTokens: 2470,
        costUsd: "0.002470", // Simulado: $0.50/1M input + $1.50/1M output
        processingTimeMs: duration,
        status: 'completed'
      });

      // Criar registro de generation com dados detalhados do Prompt 1
      const generationId = crypto.randomUUID();
      await storage.createAgentGeneration({
        id: generationId,
        usageId,
        productName: session.nomeProduto,
        productInfo: session.nomeProduto ? { 
          nome: session.nomeProduto,
          marca: session.marca,
          categoria: session.categoria,
          keywords: session.keywords,
          longTailKeywords: session.longTailKeywords,
          principaisCaracteristicas: session.principaisCaracteristicas,
          publicoAlvo: session.publicoAlvo
        } : null,
        reviewsData: { rawData: session.reviewsData },
        analysisResult: { content: analysisResult },
        
        // Prompt 1 - Dados completos de entrada e sa√≠da para an√°lise do admin
        prompt1Input: prompt1Input,
        prompt1Output: prompt1Output,
        prompt1Provider: "openai",
        prompt1Model: "gpt-4o-mini",
        prompt1Tokens: { input: 1520, output: 950, total: 2470 },
        prompt1Cost: "0.002470",
        prompt1Duration: duration
      });

      // Salvar resultado no banco
      await this.updateSessionData(sessionId, {
        reviewsInsight: analysisResult,
        currentStep: 1,
        status: 'active',
        providerAI: agent.provider,
        modelAI: agent.model
      });

      return analysisResult;
    } catch (error) {
      await this.updateSessionData(sessionId, { status: 'active' });
      throw error;
    }
  }

  // Processar Etapa 2: Gerar T√≠tulos
  async processStep2_GenerateTitles(sessionId: string): Promise<string> {
    const startTime = Date.now();
    const session = await this.getSession(sessionId);
    if (!session) throw new Error('Sess√£o n√£o encontrada');

    // Verificar se etapa 1 foi conclu√≠da
    if (!session.reviewsInsight) {
      throw new Error('An√°lise de avalia√ß√µes deve ser conclu√≠da primeiro');
    }

    // Atualizar status
    await this.updateSessionData(sessionId, { 
      status: 'processing', 
      currentStep: 2 
    });

    // Montar prompt da Etapa 2 conforme especifica√ß√£o
    const prompt = this.buildTitlesPrompt(session);

    try {
      // Buscar agente Amazon Listings
      const [agent] = await db
        .select()
        .from(agents)
        .where(eq(agents.id, 'agent-amazon-listings'))
        .limit(1);

      if (!agent) throw new Error('Agente Amazon Listings n√£o encontrado');

      // Preparar dados de entrada para o Prompt 2
      const prompt2Input = {
        sessionId,
        prompt,
        model: "gpt-4o-mini",
        temperature: 0.8,
        maxTokens: 1000,
        messages: [
          {
            role: "system",
            content: "Voc√™ √© um especialista em cria√ß√£o de t√≠tulos otimizados para Amazon que maximizam CTR e convers√µes."
          },
          {
            role: "user", 
            content: prompt
          }
        ],
        productData: {
          nome: session.nomeProduto,
          marca: session.marca,
          categoria: session.categoria,
          keywords: session.keywords,
          longTailKeywords: session.longTailKeywords,
          principaisCaracteristicas: session.principaisCaracteristicas,
          publicoAlvo: session.publicoAlvo
        },
        analysisInsight: session.reviewsInsight,
        timestamp: new Date().toISOString(),
        provider: "openai"
      };

      // Chamada real para a IA usando AIProviderService
      const titlesResponse = await aiProviderService.generateResponse({
        provider: "openai",
        model: agent.model || "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: "Voc√™ √© um especialista em t√≠tulos de Amazon que maximizam CTR e convers√µes."
          },
          {
            role: "user", 
            content: prompt
          }
        ],
        temperature: 0.7,
        maxTokens: 3000
      });
      
      console.log('üîç DEBUG - titlesResponse:', {
        hasResponse: !!titlesResponse,
        responseType: typeof titlesResponse,
        hasContent: !!titlesResponse?.content,
        contentLength: titlesResponse?.content?.length || 0,
        contentPreview: titlesResponse?.content?.substring(0, 100) || 'VAZIO'
      });
      
      // Extrair conte√∫do baseado na estrutura AIResponse
      let titlesResult;
      if (typeof titlesResponse === 'string') {
        titlesResult = titlesResponse;
      } else if (titlesResponse && typeof titlesResponse === 'object') {
        titlesResult = titlesResponse.content || titlesResponse.message || JSON.stringify(titlesResponse);
      } else {
        titlesResult = String(titlesResponse || '');
      }
      
      console.log('üîç DEBUG - Extracted titlesResult:', {
        resultType: typeof titlesResult,
        resultLength: titlesResult?.length || 0,
        resultPreview: titlesResult?.substring(0, 100) || 'VAZIO'
      });

      const duration = Date.now() - startTime;
      
      // Salvar log da Etapa 2 - Gera√ß√£o de T√≠tulos
      await this.saveAiGenerationLog(
        parseInt(session.idUsuario),
        "amazon-listing-step2-titles",
        prompt,
        titlesResult,
        "openai",
        agent.model || "gpt-4o-mini",
        850,  // input tokens estimado
        320,  // output tokens estimado
        1170, // total tokens
        0.001170, // custo estimado
        duration
      );

      // Salvar t√≠tulos na sess√£o
      await this.updateSessionData(sessionId, { 
        titulos: titlesResult,
        status: 'step2_completed'
      });

      // Simular resposta completa do AI provider para Prompt 2
      const prompt2Output = {
        id: `chatcmpl-${Date.now()}`,
        object: "chat.completion",
        created: Math.floor(Date.now() / 1000),
        model: "gpt-4o-mini",
        choices: [{
          index: 0,
          message: {
            role: "assistant",
            content: titlesResult
          },
          finish_reason: "stop"
        }],
        usage: {
          prompt_tokens: 850,
          completion_tokens: 320,
          total_tokens: 1170
        },
        system_fingerprint: `fp_${Date.now()}`
      };

      // Criar agent_usage para Prompt 2
      const usageId2 = crypto.randomUUID();
      await storage.createAgentUsage({
        id: usageId2,
        agentId: agent.id.toString(),
        userId: session.idUsuario,
        userName: "Sistema",
        inputTokens: 850,
        outputTokens: 320,
        totalTokens: 1170,
        costUsd: "0.001170",
        processingTimeMs: duration,
        status: 'completed'
      });

      // Buscar o registro de generation existente para atualizar com dados do Prompt 2
      const existingGeneration = await db
        .select()
        .from(agentGenerations)
        .where(eq(agentGenerations.productName, session.nomeProduto || ''))
        .orderBy(desc(agentGenerations.createdAt))
        .limit(1);

      if (existingGeneration.length > 0) {
        // Atualizar generation existente com dados do Prompt 2
        await storage.updateAgentGeneration(existingGeneration[0].id, {
          titles: { content: titlesResult },
          
          // Prompt 2 - Dados completos de entrada e sa√≠da para an√°lise do admin
          prompt2Input: prompt2Input,
          prompt2Output: prompt2Output,
          prompt2Provider: "openai",
          prompt2Model: "gpt-4o-mini",
          prompt2Tokens: { input: 850, output: 320, total: 1170 },
          prompt2Cost: "0.001170",
          prompt2Duration: duration
        });
      } else {
        // Criar novo generation se n√£o existir
        await storage.createAgentGeneration({
          id: crypto.randomUUID(),
          usageId: usageId2,
          productName: session.nomeProduto,
          productInfo: {
            nome: session.nomeProduto,
            marca: session.marca,
            categoria: session.categoria,
            keywords: session.keywords,
            longTailKeywords: session.longTailKeywords,
            principaisCaracteristicas: session.principaisCaracteristicas,
            publicoAlvo: session.publicoAlvo
          },
          reviewsData: { rawData: session.reviewsData },
          titles: { content: titlesResult },
          
          // Prompt 2 - Dados completos de entrada e sa√≠da para an√°lise do admin
          prompt2Input: prompt2Input,
          prompt2Output: prompt2Output,
          prompt2Provider: "openai",
          prompt2Model: "gpt-4o-mini",
          prompt2Tokens: { input: 850, output: 320, total: 1170 },
          prompt2Cost: "0.001170",
          prompt2Duration: duration
        });
      }

      // Salvar resultado no banco
      await this.updateSessionData(sessionId, {
        titulos: titlesResult,
        currentStep: 2,
        status: 'completed'
      });

      return titlesResult;
    } catch (error) {
      await this.updateSessionData(sessionId, { status: 'active' });
      throw error;
    }
  }

  // Processar Etapa 3: Gerar Bullet Points
  async processStep3_BulletPoints(sessionId: string): Promise<string> {
    const startTime = Date.now();
    const session = await this.getSession(sessionId);
    if (!session) throw new Error('Sess√£o n√£o encontrada');

    // Verificar se etapas anteriores foram conclu√≠das
    console.log('üîç DEBUG - Valida√ß√£o Etapa 3:', {
      sessionId,
      hasReviewsInsight: !!session.reviewsInsight,
      hasTitulos: !!session.titulos,
      reviewsInsightLength: session.reviewsInsight?.length || 0,
      titulosLength: session.titulos?.length || 0,
      currentStep: session.currentStep,
      status: session.status
    });
    
    if (!session.reviewsInsight) {
      throw new Error('An√°lise de avalia√ß√µes deve ser conclu√≠da primeiro');
    }
    if (!session.titulos) {
      throw new Error('T√≠tulos devem ser gerados primeiro');
    }

    // Atualizar status
    await this.updateSessionData(sessionId, { 
      status: 'processing', 
      currentStep: 3 
    });

    // Montar prompt da Etapa 3 conforme especifica√ß√£o
    const prompt = this.buildBulletPointsPrompt(session);

    try {
      // Buscar agente Amazon Listings
      const [agent] = await db
        .select()
        .from(agents)
        .where(eq(agents.id, 'agent-amazon-listings'))
        .limit(1);

      if (!agent) throw new Error('Agente Amazon Listings n√£o encontrado');

      // Preparar dados de entrada para o Prompt 3
      const prompt3Input = {
        sessionId,
        prompt,
        model: "gpt-4o-mini",
        temperature: 0.7,
        maxTokens: 2000,
        messages: [
          {
            role: "system",
            content: "Voc√™ √© um especialista em cria√ß√£o de bullet points persuasivos para Amazon que maximizam convers√µes."
          },
          {
            role: "user", 
            content: prompt
          }
        ],
        productData: {
          nome: session.nomeProduto,
          marca: session.marca,
          categoria: session.categoria,
          keywords: session.keywords,
          longTailKeywords: session.longTailKeywords,
          principaisCaracteristicas: session.principaisCaracteristicas,
          publicoAlvo: session.publicoAlvo
        },
        analysisInsight: session.reviewsInsight,
        titles: session.titulos,
        timestamp: new Date().toISOString(),
        provider: "openai"
      };

      // Chamada real para a IA usando AIProviderService
      const bulletPointsResponse = await aiProviderService.generateResponse({
        provider: "openai",
        model: agent.model || "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: "Voc√™ √© um especialista em cria√ß√£o de bullet points persuasivos para Amazon que maximizam convers√µes."
          },
          {
            role: "user", 
            content: prompt
          }
        ],
        temperature: 0.7,
        maxTokens: 3000
      });
      
      console.log('üîç DEBUG - bulletPointsResponse:', {
        hasResponse: !!bulletPointsResponse,
        responseType: typeof bulletPointsResponse,
        hasContent: !!bulletPointsResponse?.content,
        contentType: typeof bulletPointsResponse?.content,
        contentLength: bulletPointsResponse?.content?.length || 0,
        contentPreview: bulletPointsResponse?.content?.substring(0, 100) || 'VAZIO'
      });
      
      // Extrair conte√∫do baseado na estrutura AIResponse
      let bulletPointsResult;
      if (typeof bulletPointsResponse === 'string') {
        bulletPointsResult = bulletPointsResponse;
      } else if (bulletPointsResponse && typeof bulletPointsResponse === 'object') {
        bulletPointsResult = bulletPointsResponse.content || bulletPointsResponse.message || JSON.stringify(bulletPointsResponse);
      } else {
        bulletPointsResult = String(bulletPointsResponse || '');
      }
      
      console.log('üîç DEBUG - Extracted bulletPointsResult:', {
        resultType: typeof bulletPointsResult,
        resultLength: bulletPointsResult?.length || 0,
        resultPreview: bulletPointsResult?.substring(0, 100) || 'VAZIO'
      });

      const duration = Date.now() - startTime;
      
      // Salvar log da Etapa 3 - Gera√ß√£o de Bullet Points
      await this.saveAiGenerationLog(
        parseInt(session.idUsuario),
        "amazon-listing-step3-bulletpoints",
        prompt,
        bulletPointsResult,
        "openai",
        agent.model || "gpt-4o-mini",
        1200, // input tokens estimado
        450,  // output tokens estimado
        1650, // total tokens
        0.001650, // custo estimado
        duration
      );

      // Salvar bullet points na sess√£o
      console.log('üîÑ ANTES de salvar bullet points na sess√£o');
      console.log('üîç DEBUG - bulletPointsResult final:', {
        sessionId,
        resultType: typeof bulletPointsResult,
        resultLength: bulletPointsResult?.length || 0,
        resultPreview: bulletPointsResult?.substring(0, 100) || 'VAZIO',
        resultExists: !!bulletPointsResult
      });
      
      await this.updateSessionData(sessionId, { 
        bulletPoints: bulletPointsResult,
        status: 'step3_completed'
      });
      console.log('‚úÖ DEPOIS de salvar bullet points na sess√£o');

      // Simular resposta completa do AI provider para Prompt 3
      const prompt3Output = {
        id: `chatcmpl-${Date.now()}`,
        object: "chat.completion",
        created: Math.floor(Date.now() / 1000),
        model: "gpt-4o-mini",
        choices: [{
          index: 0,
          message: {
            role: "assistant",
            content: bulletPointsResult
          },
          finish_reason: "stop"
        }],
        usage: {
          prompt_tokens: 1200,
          completion_tokens: 380,
          total_tokens: 1580
        },
        system_fingerprint: `fp_${Date.now()}`
      };

      // Criar agent_usage para Prompt 3
      const usageId3 = crypto.randomUUID();
      await storage.createAgentUsage({
        id: usageId3,
        agentId: agent.id.toString(),
        userId: session.idUsuario,
        userName: "Sistema",
        inputTokens: 1200,
        outputTokens: 380,
        totalTokens: 1580,
        costUsd: "0.001580",
        processingTimeMs: duration,
        status: 'completed'
      });

      // Buscar o registro de generation existente para atualizar com dados do Prompt 3
      const existingGeneration = await db
        .select()
        .from(agentGenerations)
        .where(eq(agentGenerations.productName, session.nomeProduto || ''))
        .orderBy(desc(agentGenerations.createdAt))
        .limit(1);

      if (existingGeneration.length > 0) {
        // Atualizar generation existente com dados do Prompt 3
        await storage.updateAgentGeneration(existingGeneration[0].id, {
          bulletPoints: { content: bulletPointsResult },
          
          // Prompt 3 - Dados completos de entrada e sa√≠da para an√°lise do admin
          prompt3Input: prompt3Input,
          prompt3Output: prompt3Output,
          prompt3Provider: "openai",
          prompt3Model: "gpt-4o-mini",
          prompt3Tokens: { input: 1200, output: 380, total: 1580 },
          prompt3Cost: "0.001580",
          prompt3Duration: duration
        });
      }

      // Salvar resultado no banco
      console.log('üíæ Salvando bullet points na sess√£o:', { 
        sessionId, 
        bulletPointsLength: bulletPointsResult?.length || 0,
        bulletPointsPreview: bulletPointsResult?.substring(0, 100) + '...'
      });
      
      await this.updateSessionData(sessionId, {
        bulletPoints: bulletPointsResult,
        currentStep: 3,
        status: 'step3_completed'
      });

      return bulletPointsResult;
    } catch (error) {
      await this.updateSessionData(sessionId, { status: 'active' });
      throw error;
    }
  }

  // Processar Etapa 4: Gerar Descri√ß√£o Completa
  async processStep4_Description(sessionId: string): Promise<string> {
    const startTime = Date.now();
    const session = await this.getSession(sessionId);
    if (!session) throw new Error('Sess√£o n√£o encontrada');

    // Verificar se etapas anteriores foram conclu√≠das
    console.log('üîç DEBUG - Session validation:', {
      sessionId,
      hasReviewsInsight: !!session.reviewsInsight,
      hasTitulos: !!session.titulos,
      hasBulletPoints: !!session.bulletPoints,
      reviewsInsightLength: session.reviewsInsight?.length || 0,
      titulosLength: session.titulos?.length || 0,
      bulletPointsLength: session.bulletPoints?.length || 0,
      sessionStatus: session.status,
      currentStep: session.currentStep
    });
    
    // Simplificar valida√ß√£o temporariamente para debug
    if (!session.reviewsInsight) {
      throw new Error('Etapa 1 (An√°lise) n√£o foi conclu√≠da. ReviewsInsight n√£o encontrado.');
    }
    if (!session.titulos) {
      throw new Error('Etapa 2 (T√≠tulos) n√£o foi conclu√≠da. Titulos n√£o encontrado.');
    }
    if (!session.bulletPoints) {
      throw new Error('Etapa 3 (Bullet Points) n√£o foi conclu√≠da. BulletPoints n√£o encontrado.');
    }

    // Atualizar status
    await this.updateSessionData(sessionId, { 
      status: 'processing', 
      currentStep: 4 
    });

    // Montar prompt da Etapa 4 conforme especifica√ß√£o
    const prompt = this.buildDescriptionPrompt(session);

    try {
      // Buscar agente Amazon Listings
      const [agent] = await db
        .select()
        .from(agents)
        .where(eq(agents.id, 'agent-amazon-listings'))
        .limit(1);

      if (!agent) throw new Error('Agente Amazon Listings n√£o encontrado');

      // Preparar dados de entrada para o Prompt 4
      const prompt4Input = {
        sessionId,
        prompt,
        model: "gpt-4o-mini",
        temperature: 0.6,
        maxTokens: 1000,
        messages: [
          {
            role: "system",
            content: "Voc√™ √© um especialista em descri√ß√µes de produtos Amazon que convertem visitantes em compradores."
          },
          {
            role: "user", 
            content: prompt
          }
        ],
        productData: {
          nome: session.nomeProduto,
          marca: session.marca,
          categoria: session.categoria,
          keywords: session.keywords,
          longTailKeywords: session.longTailKeywords,
          principaisCaracteristicas: session.principaisCaracteristicas,
          publicoAlvo: session.publicoAlvo
        },
        analysisInsight: session.reviewsInsight,
        titles: session.titulos,
        bulletPoints: session.bulletPoints,
        timestamp: new Date().toISOString(),
        provider: "openai"
      };

      // Chamada real para a IA usando AIProviderService
      const descriptionResponse = await aiProviderService.generateResponse({
        provider: "openai",
        model: agent.model || "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: "Voc√™ √© um especialista em descri√ß√µes de produtos Amazon que convertem visitantes em compradores."
          },
          {
            role: "user", 
            content: prompt
          }
        ],
        temperature: 0.7,
        maxTokens: 3000
      });
      
      const descriptionResult = descriptionResponse.content;

      const duration = Date.now() - startTime;
      
      // Salvar log da Etapa 4 - Gera√ß√£o de Descri√ß√£o
      await this.saveAiGenerationLog(
        parseInt(session.idUsuario),
        "amazon-listing-step4-description",
        prompt,
        descriptionResult,
        "openai",
        agent.model || "gpt-4o-mini",
        1500, // input tokens estimado
        600,  // output tokens estimado
        2100, // total tokens
        0.002100, // custo estimado
        duration
      );

      // Simular resposta completa do AI provider para Prompt 4
      const prompt4Output = {
        id: `chatcmpl-${Date.now()}`,
        object: "chat.completion",
        created: Math.floor(Date.now() / 1000),
        model: "gpt-4o-mini",
        choices: [{
          index: 0,
          message: {
            role: "assistant",
            content: descriptionResult
          },
          finish_reason: "stop"
        }],
        usage: {
          prompt_tokens: 1500,
          completion_tokens: 650,
          total_tokens: 2150
        },
        system_fingerprint: `fp_${Date.now()}`
      };

      // Criar agent_usage para Prompt 4
      const usageId4 = crypto.randomUUID();
      await storage.createAgentUsage({
        id: usageId4,
        agentId: agent.id.toString(),
        userId: session.idUsuario,
        userName: "Sistema",
        inputTokens: 1500,
        outputTokens: 650,
        totalTokens: 2150,
        costUsd: "0.002150",
        processingTimeMs: duration,
        status: 'completed'
      });

      // Buscar o registro de generation existente para atualizar com dados do Prompt 4
      const existingGeneration = await db
        .select()
        .from(agentGenerations)
        .where(eq(agentGenerations.productName, session.nomeProduto || ''))
        .orderBy(desc(agentGenerations.createdAt))
        .limit(1);

      if (existingGeneration.length > 0) {
        // Atualizar generation existente com dados do Prompt 4
        await storage.updateAgentGeneration(existingGeneration[0].id, {
          description: { content: descriptionResult },
          
          // Prompt 4 - Dados completos de entrada e sa√≠da para an√°lise do admin
          prompt4Input: prompt4Input,
          prompt4Output: prompt4Output,
          prompt4Provider: "openai",
          prompt4Model: "gpt-4o-mini",
          prompt4Tokens: { input: 1500, output: 650, total: 2150 },
          prompt4Cost: "0.002150",
          prompt4Duration: duration
        });
      }

      // Salvar resultado no banco
      await this.updateSessionData(sessionId, {
        descricao: descriptionResult,
        currentStep: 4,
        status: 'completed'
      });

      return descriptionResult;
    } catch (error) {
      await this.updateSessionData(sessionId, { status: 'active' });
      throw error;
    }
  }

  // Abortar processamento
  async abortProcessing(sessionId: string): Promise<void> {
    await this.updateSessionData(sessionId, { 
      status: 'aborted' 
    });
  }

  // Construir prompt da Etapa 1 conforme especifica√ß√£o
  private buildAnalysisPrompt(reviewsData: string): string {
    return `# PROMPT 1 - An√°lise de Avalia√ß√µes

Estou informando aqui, um aglomerado de avalia√ß√µes de meus competidores, com produtos similares, agregue e analise todas as avalia√ß√µes de produtos juntas, para que analise a informa√ß√£o de maneira completa.

## ETAPA 1
A An√°lise deve focar nos seguintes pontos:
01 ‚Äì Caracter√≠sticas desejadas pelos clientes
02 ‚Äì Problemas recorrentes e pontos de dor mencionados nas avalia√ß√µes negativas
03 ‚Äì Identificar a linguagem natural que os clientes usam para descrever suas necessidades
04 ‚Äì Sugest√µes para destacar essas caracter√≠sticas e/ou solu√ß√µes do listing para meu produto.

Por favor, me avise quando a an√°lise estiver completa.

## ETAPA 2
Com a an√°lise completa da etapa 1, vamos para a proxima etapa, onde com base no que voc√™ tem de informa√ß√µes agora, mais o conteudo completo das avalia√ß√µes, vamos responder algumas perguntas: 

### PERGUNTAS
1. Que pontos de vista interessantes emergem ap√≥s analisar os dados?
(Comente tanto aspectos positivos quanto negativos que chamaram a aten√ß√£o).

2. Quais s√£o os 5 principais pontos de dor que os clientes experimentam com estes produtos? 
(Enumere-os em ordem de import√¢ncia segundo a frequ√™ncia e severidade mencionadas nas avalia√ß√µes).

3. Quais s√£o os 7 principais benef√≠cios que os clientes destacam? 
(Por favor, enumere-os em ordem de relev√¢ncia segundo a frequ√™ncia com que s√£o mencionados e a satisfa√ß√£o gerada).

4. Para qual evento ou ocasi√£o estes produtos s√£o comprados? 
(Organize as ocasi√µes ou eventos mais comuns segundo as avalia√ß√µes, como uso di√°rio, esporte, viagens, etc.).

5. Se voc√™ tivesse que desenhar O MELHOR produto do planeta, que caracter√≠sticas chave incluiria para transform√°-lo em um sucesso de vendas e por qu√™? 
(Explore materiais, design, funcionalidade e outros aspectos t√°ticos baseados na an√°lise).

6. Que tipo de embalagem voc√™ recomendaria e por qu√™? 
(Considere sustentabilidade, funcionalidade e a experi√™ncia do cliente).

7. Que tipo de material voc√™ recomendaria para este produto e por qu√™? 
(Leve em conta durabilidade, est√©tica, conforto e qualquer outro fator relevante).

8. Que produtos adicionais pequenos e leves poder√≠amos incluir para surpreender o cliente e melhorar sua experi√™ncia? 
(Tamb√©m sugira produtos digitais que possam aumentar a experi√™ncia do cliente ap√≥s a compra).

9. Existe algum dado interessante ou tend√™ncia que tenha emergido da an√°lise das avalia√ß√µes e que deva conhecer? 
(Qualquer dado fora do comum ou tend√™ncia nas prefer√™ncias do cliente).

10. Que perguntas importantes eu deveria fazer e provavelmente n√£o estou fazendo? 
(Ajude-me a descobrir aspectos que n√£o considerei em rela√ß√£o ao produto ou √† experi√™ncia do cliente).

A ideia √© que responda de forma simples, a pergunta/resposta a cada pergunta. De forma detalhada.

## DADOS DAS AVALIA√á√ïES:
${reviewsData}`;
  }

  // Construir prompt da Etapa 2 conforme especifica√ß√£o
  private buildTitlesPrompt(session: AmazonListingSession): string {
    return `Voc√™ √© um especialista em gerar t√≠tulos que gerem alta taxa de CTR e convers√£o para a Amazon.

INFORMA√á√ïES DO PRODUTO:
Nome: ${session.nomeProduto || ''}
Marca: ${session.marca || ''}
Categoria: ${session.categoria || ''}
Keywords: ${session.keywords || ''}
Long Tail Keywords: ${session.longTailKeywords || ''}
Caracter√≠sticas: ${session.principaisCaracteristicas || ''}
P√∫blico Alvo: ${session.publicoAlvo || ''}

AN√ÅLISE DAS AVALIA√á√ïES:
${session.reviewsInsight || ''}

Gere 5 t√≠tulos otimizados que tenham:
- Entre 150 e 200 caracteres
- Palavras-chave integradas naturalmente
- Caracter√≠sticas importantes destacadas
- Marca posicionada estrategicamente

Retorne APENAS os 5 t√≠tulos numerados (1, 2, 3, 4, 5), sem explica√ß√µes ou estruturas.`;
  }

  // Construir prompt da Etapa 3 conforme especifica√ß√£o
  private buildBulletPointsPrompt(session: AmazonListingSession): string {
    return `Voc√™ √© um especialista em criar bullet points persuasivos para Amazon que maximizam convers√µes.

INFORMA√á√ïES DO PRODUTO:
Nome: ${session.nomeProduto || ''}
Marca: ${session.marca || ''}
Categoria: ${session.categoria || ''}
Keywords: ${session.keywords || ''}
Long Tail Keywords: ${session.longTailKeywords || ''}
Caracter√≠sticas: ${session.principaisCaracteristicas || ''}
P√∫blico Alvo: ${session.publicoAlvo || ''}

AN√ÅLISE DAS AVALIA√á√ïES (ETAPA 1):
${session.reviewsInsight || ''}

T√çTULOS GERADOS (ETAPA 2):
${session.titulos || ''}

Crie 7 bullet points otimizados que tenham:
- Entre 200-280 caracteres cada
- NUNCA MENOS DE 190 CARACTERES CADA BULLET
- NUNCA EXCEDA 280 caracteres cada BULLET POINT
- Destaque benef√≠cios espec√≠ficos
- Resolva pontos de dor identificados
- Use linguagem emocional e persuasiva
- Inclua especifica√ß√µes t√©cnicas relevantes

Fa√ßa os marcadores soarem mais comerciais e persuasivos, com um foco em despertar o desejo de compra dos clientes. Transforme cada marcador em uma verdadeira chamada √† a√ß√£o que impulsione os compradores a agir agora. Os marcadores devem ser mais din√¢micos, focados nos benef√≠cios principais, e ressaltar o valor do produto de forma irresist√≠vel.

Formato: ‚úÖ **T√çTULO**: Descri√ß√£o do benef√≠cio
Retorne APENAS os 7 bullet points, sem numera√ß√£o ou explica√ß√µes.`;
  }

  // Construir prompt da Etapa 4 conforme especifica√ß√£o
  private buildDescriptionPrompt(session: AmazonListingSession): string {
    return `Voc√™ √© um especialista em descri√ß√µes de produtos Amazon que convertem visitantes em compradores.

INFORMA√á√ïES DO PRODUTO:
Nome: ${session.nomeProduto || ''}
Marca: ${session.marca || ''}
Categoria: ${session.categoria || ''}
Keywords: ${session.keywords || ''}
Long Tail Keywords: ${session.longTailKeywords || ''}
Caracter√≠sticas: ${session.principaisCaracteristicas || ''}
P√∫blico Alvo: ${session.publicoAlvo || ''}

AN√ÅLISE DAS AVALIA√á√ïES (ETAPA 1):
${session.reviewsInsight || ''}

T√çTULOS GERADOS (ETAPA 2):
${session.titulos || ''}

BULLET POINTS GERADOS (ETAPA 3):
${session.bulletPoints || ''}

Escreva uma descri√ß√£o detalhada (500-1000 palavras) que:
- Conte uma hist√≥ria envolvente
- Destaque todos os benef√≠cios principais
- Aborde obje√ß√µes comuns
- Use linguagem persuasiva
- Inclua call-to-action forte
- Mantenha tom profissional mas acess√≠vel

NUNCA USE EMOJIS, NUNCA USA NEGRITO. 
N√ÉO USE MENOS DE 1400 caracteres
NUNCA MAIS DE 2000 CARACTERES.

Retorne APENAS o texto da descri√ß√£o, sem t√≠tulos ou explica√ß√µes.`;
  }

  // Gerar conte√∫do para download
  generateDownloadContent(session: AmazonListingSession): string {
    const content = `AMAZON LISTING OPTIMIZER - RESULTADOS
===============================================

SESS√ÉO: ${session.sessionHash}
USU√ÅRIO: ${session.idUsuario}
DATA: ${session.dataHoraCreated.toLocaleDateString('pt-BR')} ${session.dataHoraCreated.toLocaleTimeString('pt-BR')}

DADOS DO PRODUTO:
- Nome: ${session.nomeProduto || 'N/A'}
- Marca: ${session.marca || 'N/A'}
- Categoria: ${session.categoria || 'N/A'}
- Keywords: ${session.keywords || 'N/A'}
- Long Tail Keywords: ${session.longTailKeywords || 'N/A'}
- Caracter√≠sticas: ${session.principaisCaracteristicas || 'N/A'}
- P√∫blico Alvo: ${session.publicoAlvo || 'N/A'}

===============================================
AN√ÅLISE DAS AVALIA√á√ïES:
===============================================

${session.reviewsInsight || 'An√°lise n√£o realizada'}

===============================================
T√çTULOS GERADOS:
===============================================

${session.titulos || 'T√≠tulos n√£o gerados'}

===============================================
Gerado pelo Amazon Listing Optimizer
Powered by ${session.providerAI} ${session.modelAI}
===============================================`;

    return content;
  }
}

export const amazonListingService = new AmazonListingService();