import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import { useCreditSystem } from "@/hooks/useCreditSystem";
import { Loader2, Search, TrendingUp, Target, BookOpen, Sparkles } from "lucide-react";
import { getAuthToken } from "@/utils/auth";

interface AnalysisResult {
  analysis: string;
  duration: number;
  cost: number;
}

export default function KeywordAnalysisAgent() {
  const [formData, setFormData] = useState({
    nome_produto: "",
    categoria: "",
    descricao: "",
    outras_informacoes: ""
  });
  
  const [isProcessing, setIsProcessing] = useState(false);
  const [result, setResult] = useState<AnalysisResult | null>(null);
  const { toast } = useToast();
  const { checkCredits, showInsufficientCreditsToast, logAIGeneration } = useCreditSystem();

  const FEATURE_CODE = 'agents.keyword_analysis';
  const CREDIT_COST = 6;

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const isFormValid = formData.nome_produto.trim() && formData.categoria.trim() && formData.descricao.trim();

  const generateKeywordAnalysis = async () => {
    if (!isFormValid) {
      toast({
        title: "Campos obrigat√≥rios",
        description: "Preencha pelo menos Nome do Produto, Categoria e Descri√ß√£o",
        variant: "destructive"
      });
      return;
    }

    // Verificar cr√©ditos primeiro
    const creditCheck = await checkCredits(FEATURE_CODE);
    if (!creditCheck.canProcess) {
      showInsufficientCreditsToast(creditCheck.requiredCredits, creditCheck.currentBalance);
      return;
    }

    setIsProcessing(true);
    const startTime = Date.now();

    try {
      const token = getAuthToken();
      if (!token) {
        throw new Error('Token de autentica√ß√£o n√£o encontrado. Fa√ßa login novamente.');
      }

      // Construir o prompt completo com base no template fornecido
      const prompt = `
Voc√™ √© um especialista em SEO, marketing digital e vendas online, principalmente focado em Amazon, com foco exclusivo em an√°lise de palavras-chave. Sua √∫nica tarefa √© identificar, analisar e entregar uma lista completa e estrat√©gica de palavras-chave relacionadas ao produto fornecido.

UTILIZE REASONING AVAN√áADO E PESQUISA WEB para mapear todas as possibilidades de keywords que podem ser usadas no t√≠tulo do produto na Amazon.

INFORMA√á√ïES DO PRODUTO:
- Nome do Produto: ${formData.nome_produto}
- Categoria: ${formData.categoria}
- Descri√ß√£o: ${formData.descricao}
- Outras Informa√ß√µes: ${formData.outras_informacoes}

TAREFAS OBRIGAT√ìRIAS DE PESQUISA WEB:
1. Verificar tend√™ncias atuais de busca
2. Identificar termos emergentes no mercado
3. Analisar concorrentes diretos e indiretos no Amazon.com.br
4. Validar volume de busca e competitividade

AN√ÅLISE POR CATEGORIAS (para cada categoria, forne√ßa pelo menos 4-8 keywords relevantes):

üìç 1. SIN√îNIMOS E VARIA√á√ïES
- Pesquise no Google Trends Brasil varia√ß√µes do nome do produto
- Analise t√≠tulos de produtos similares na Amazon.com.br
- Considere diferen√ßas regionais brasileiras

üìç 2. TERMOS DE BUSCA DOS USU√ÅRIOS
- Como os consumidores realmente pesquisam por este produto
- Especifica√ß√µes t√©cnicas, compatibilidades, caracter√≠sticas
- Diferentes n√≠veis de conhecimento t√©cnico

üìç 3. UTILIDADE E FUN√á√ÉO
- Mapear todas as fun√ß√µes e usos do produto
- Problemas que o produto resolve
- Aplica√ß√µes prim√°rias e secund√°rias

üìç 4. BENEF√çCIOS E VANTAGENS
- Keywords relacionadas aos benef√≠cios motivadores de compra
- Vantagens competitivas e diferenciais
- Benef√≠cios emocionais e funcionais

üìç 5. CONTEXTO DE USO E AMBIENTE
- Onde, quando e em que situa√ß√µes o produto √© usado
- Ambientes espec√≠ficos (casa, trabalho, lazer)
- Ocasi√µes e momentos de uso

üìç 6. REGIONALIZA√á√ÉO BRASILEIRA
- Varia√ß√µes lingu√≠sticas por regi√£o (Norte, Nordeste, Sudeste, Sul, Centro-Oeste)
- Termos universais vs. regionais
- Exemplo: mandioca = macaxeira = aipim

üìç 7. PERGUNTAS E OBJE√á√ïES DOS CLIENTES
- Principais d√∫vidas sobre o produto
- Obje√ß√µes comuns de compra
- Respostas persuasivas (2-4 frases cada)

üìç 8. TEXTOS COMERCIAIS PARA FOTOS
Crie textos para 3 fotos infogr√°ficas:
- Foto 1: Apresentar produto + principal benef√≠cio
- Foto 2: Funcionalidades espec√≠ficas + diferenciais
- Foto 3: Resultados + call-to-action de compra

FORMATO DE SA√çDA:
Organize sua resposta seguindo esta estrutura:

# üìä AN√ÅLISE DE PALAVRAS-CHAVE - ${formData.nome_produto}

## üîç 1. SIN√îNIMOS E VARIA√á√ïES
[Lista com prioridade Alta/M√©dia/Baixa]

## üéØ 2. TERMOS DE BUSCA DOS USU√ÅRIOS
[Separar por inten√ß√£o: informacional, comercial, transacional]

## ‚öôÔ∏è 3. UTILIDADE E FUN√á√ÉO
[Tabela: Fun√ß√£o | Keywords | Problema que Resolve]

## ‚ú® 4. BENEF√çCIOS E VANTAGENS  
[Tabela: Benef√≠cio | Keywords | Apelo Emocional]

## üè† 5. CONTEXTO DE USO
[Tabela: Ambiente | Keywords Contextuais | Ocasi√£o]

## üó∫Ô∏è 6. REGIONALIZA√á√ÉO BRASILEIRA
[Por regi√£o + termo universal recomendado]

## ‚ùì 7. PERGUNTAS E OBJE√á√ïES
[Pergunta + Resposta persuasiva de 2-4 frases]

## üì∏ 8. TEXTOS PARA FOTOS INFOGR√ÅFICAS
**Foto 1:** [T√≠tulo + 2-3 benef√≠cios + CTA]
**Foto 2:** [Funcionalidades + diferenciais + garantia]  
**Foto 3:** [Resultados + satisfa√ß√£o + CTA forte]

## üéØ TOP 10 KEYWORDS PRIORIZADAS
1. [Keyword] - Alta prioridade - [Justificativa]
[Continue 2-10...]

## üí° T√çTULO SUGERIDO PARA AMAZON
[Construa um t√≠tulo otimizado usando as keywords de alta prioridade]

## üöÄ PR√ìXIMOS PASSOS
[5 recomenda√ß√µes pr√°ticas para implementa√ß√£o]

IMPORTANTE: Priorize termos com inten√ß√£o de compra, volume relevante no Brasil e baixa-m√©dia competitividade. Use reasoning para validar cada keyword antes de incluir.
`;

      const response = await fetch('/api/ai-providers/test', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          provider: 'openai',
          model: 'gpt-4o',
          prompt: prompt,
          maxTokens: 8000,
          temperature: 0.7,
          enableWebSearch: true,
          enableReasoning: true
        })
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.details || 'Falha na an√°lise de palavras-chave');
      }

      const data = await response.json();
      const duration = Date.now() - startTime;

      setResult({
        analysis: data.response,
        duration,
        cost: data.cost || 0
      });

      // Registrar log de uso com dedu√ß√£o autom√°tica de cr√©ditos
      await logAIGeneration({
        featureCode: FEATURE_CODE,
        provider: 'openai',
        model: 'gpt-4o',
        prompt: `An√°lise de palavras-chave: ${formData.nome_produto}`,
        response: 'An√°lise completa de keywords gerada com sucesso',
        inputTokens: data.usage?.inputTokens || 0,
        outputTokens: data.usage?.outputTokens || 0,
        totalTokens: data.usage?.totalTokens || 0,
        cost: data.cost || 0,
        duration,
        creditsUsed: 0 // Ser√° deduzido automaticamente
      });

      toast({
        title: "‚úÖ An√°lise conclu√≠da!",
        description: `An√°lise de palavras-chave gerada em ${(duration / 1000).toFixed(1)}s`
      });

    } catch (error: any) {
      console.error('Error generating keyword analysis:', error);
      toast({
        title: "‚ùå Erro na an√°lise",
        description: error.message || "Tente novamente mais tarde",
        variant: "destructive"
      });
    } finally {
      setIsProcessing(false);
    }
  };

  const resetForm = () => {
    setFormData({
      nome_produto: "",
      categoria: "",
      descricao: "",
      outras_informacoes: ""
    });
    setResult(null);
  };

  return (
    <div className="container mx-auto max-w-7xl p-6 space-y-6">
      {/* Header */}
      <div className="text-center space-y-4">
        <div className="flex items-center justify-center gap-3">
          <div className="p-3 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full">
            <Search className="w-8 h-8 text-white" />
          </div>
          <div>
            <h1 className="text-3xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
              An√°lise de Palavras-Chave para Amazon
            </h1>
            <p className="text-gray-600 dark:text-gray-400">
              An√°lise completa de SEO com research avan√ßado e estrat√©gias regionalizadas
            </p>
          </div>
        </div>
        
        <div className="flex items-center justify-center gap-4 text-sm text-gray-600 dark:text-gray-400">
          <Badge variant="secondary" className="bg-purple-50 text-purple-700 dark:bg-purple-900/20 dark:text-purple-300">
            <Sparkles className="w-3 h-3 mr-1" />
            {CREDIT_COST} cr√©ditos por an√°lise
          </Badge>
          <Badge variant="outline" className="border-green-200 text-green-700 dark:border-green-800 dark:text-green-300">
            <TrendingUp className="w-3 h-3 mr-1" />
            Research com IA Avan√ßada
          </Badge>
          <Badge variant="outline" className="border-blue-200 text-blue-700 dark:border-blue-800 dark:text-blue-300">
            <Target className="w-3 h-3 mr-1" />
            8 Categorias de An√°lise
          </Badge>
        </div>
      </div>

      <div className="grid lg:grid-cols-2 gap-6">
        {/* Input Form */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <BookOpen className="w-5 h-5" />
              Informa√ß√µes do Produto
            </CardTitle>
            <CardDescription>
              Preencha os dados do produto para an√°lise completa de palavras-chave
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="nome_produto">Nome do Produto *</Label>
              <Input
                id="nome_produto"
                placeholder="Ex: Cadeira Gamer Ergon√¥mica com LED RGB"
                value={formData.nome_produto}
                onChange={(e) => handleInputChange('nome_produto', e.target.value)}
                maxLength={100}
              />
              <div className="text-xs text-gray-500 text-right">
                {formData.nome_produto.length}/100 caracteres
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="categoria">Categoria Amazon *</Label>
              <Input
                id="categoria"
                placeholder="Ex: Casa e Jardim > M√≥veis > Cadeiras de Escrit√≥rio"
                value={formData.categoria}
                onChange={(e) => handleInputChange('categoria', e.target.value)}
                maxLength={80}
              />
              <div className="text-xs text-gray-500 text-right">
                {formData.categoria.length}/80 caracteres
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="descricao">Descri√ß√£o do Produto *</Label>
              <Textarea
                id="descricao"
                placeholder="Descreva as principais caracter√≠sticas, materiais, dimens√µes, funcionalidades e benef√≠cios do produto..."
                value={formData.descricao}
                onChange={(e) => handleInputChange('descricao', e.target.value)}
                className="min-h-[120px] resize-none"
                maxLength={1000}
              />
              <div className="text-xs text-gray-500 text-right">
                {formData.descricao.length}/1000 caracteres
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="outras_informacoes">Outras Informa√ß√µes</Label>
              <Textarea
                id="outras_informacoes"
                placeholder="Informa√ß√µes adicionais: marca, p√∫blico-alvo, diferencial competitivo, certifica√ß√µes, garantia..."
                value={formData.outras_informacoes}
                onChange={(e) => handleInputChange('outras_informacoes', e.target.value)}
                className="min-h-[100px] resize-none"
                maxLength={800}
              />
              <div className="text-xs text-gray-500 text-right">
                {formData.outras_informacoes.length}/800 caracteres
              </div>
            </div>

            <div className="flex gap-3 pt-4">
              <Button
                onClick={generateKeywordAnalysis}
                disabled={!isFormValid || isProcessing}
                className="flex-1 bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600"
              >
                {isProcessing ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    Analisando...
                  </>
                ) : (
                  <>
                    <Search className="w-4 h-4 mr-2" />
                    Analisar Keywords ({CREDIT_COST} cr√©ditos)
                  </>
                )}
              </Button>
              
              {result && (
                <Button
                  onClick={resetForm}
                  variant="outline"
                  disabled={isProcessing}
                >
                  Nova An√°lise
                </Button>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Results */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <TrendingUp className="w-5 h-5" />
              Resultado da An√°lise
            </CardTitle>
            <CardDescription>
              An√°lise completa de palavras-chave com 8 categorias estrat√©gicas
            </CardDescription>
          </CardHeader>
          <CardContent>
            {!result ? (
              <div className="text-center py-12 text-gray-500 dark:text-gray-400">
                <Search className="w-16 h-16 mx-auto mb-4 opacity-20" />
                <p className="text-lg font-medium mb-2">An√°lise de Keywords</p>
                <p className="text-sm">
                  Preencha as informa√ß√µes e clique em "Analisar Keywords" para gerar uma an√°lise completa
                </p>
                <div className="mt-6 space-y-2 text-xs">
                  <p>‚úì 1. Sin√¥nimos e Varia√ß√µes</p>
                  <p>‚úì 2. Termos de Busca dos Usu√°rios</p>
                  <p>‚úì 3. Utilidade e Fun√ß√£o</p>
                  <p>‚úì 4. Benef√≠cios e Vantagens</p>
                  <p>‚úì 5. Contexto de Uso e Ambiente</p>
                  <p>‚úì 6. Regionaliza√ß√£o Brasileira</p>
                  <p>‚úì 7. Perguntas e Obje√ß√µes</p>
                  <p>‚úì 8. Textos para Fotos Infogr√°ficas</p>
                </div>
              </div>
            ) : (
              <div className="space-y-4">
                {/* Analysis Stats */}
                <div className="flex gap-4 p-4 bg-gray-50 dark:bg-gray-900 rounded-lg">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-purple-600">
                      {(result.duration / 1000).toFixed(1)}s
                    </div>
                    <div className="text-xs text-gray-500">Dura√ß√£o</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-green-600">
                      ${result.cost.toFixed(4)}
                    </div>
                    <div className="text-xs text-gray-500">Custo</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-blue-600">
                      {CREDIT_COST}
                    </div>
                    <div className="text-xs text-gray-500">Cr√©ditos</div>
                  </div>
                </div>

                {/* Analysis Content */}
                <div className="prose prose-sm dark:prose-invert max-w-none">
                  <div className="whitespace-pre-wrap text-sm leading-relaxed">
                    {result.analysis}
                  </div>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}