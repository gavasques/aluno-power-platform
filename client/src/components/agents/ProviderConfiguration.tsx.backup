import { useEffect } from "react";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Slider } from "@/components/ui/slider";
import { Input } from "@/components/ui/input";
import { Switch } from "@/components/ui/switch";
import { useQuery } from "@tanstack/react-query";
import { Brain, Search, Eye, Globe, Layers, Settings2, Database, AlertTriangle } from "lucide-react";

interface ProviderConfigurationProps {
  // Single-step mode props
  formData?: any;
  setFormData?: (data: any) => void;
  compact?: boolean;
  
  // Multi-step mode props
  selectedProvider?: string;
  selectedModel?: string;
  temperature?: number;
  maxTokens?: number;
  onProviderChange?: (provider: string) => void;
  onModelChange?: (model: string) => void;
  onTemperatureChange?: (temperature: number) => void;
  onMaxTokensChange?: (maxTokens: number) => void;
  onAdvancedSettingsChange?: (settings: any) => void;
}

const PROVIDERS = [
  { value: 'openai', label: 'OpenAI (ChatGPT)', icon: '🤖', color: 'bg-green-100 text-green-800' },
  { value: 'anthropic', label: 'Anthropic (Claude)', icon: '🧠', color: 'bg-purple-100 text-purple-800' },
  { value: 'gemini', label: 'Google Gemini', icon: '⭐', color: 'bg-blue-100 text-blue-800' },
  { value: 'deepseek', label: 'DeepSeek AI', icon: '🔍', color: 'bg-orange-100 text-orange-800' },
  { value: 'xai', label: 'xAI (Grok)', icon: '🧪', color: 'bg-indigo-100 text-indigo-800' },
  { value: 'openrouter', label: 'OpenRouter (400+ Models)', icon: '🌐', color: 'bg-teal-100 text-teal-800' }
];

export default function ProviderConfiguration(props: ProviderConfigurationProps) {
  const { compact = false } = props;
  
  // Determine which mode we're in
  const isMultiStepMode = 'selectedProvider' in props && props.selectedProvider !== undefined;
  
  // Create a unified formData object
  const formData = isMultiStepMode ? {
    provider: props.selectedProvider || 'openai',
    model: props.selectedModel || 'gpt-4o-mini',
    temperature: props.temperature || 0.7,
    maxTokens: props.maxTokens || 2000,
    // Add other fields as needed
  } : props.formData || {};
  
  // Create unified update functions
  const updateProvider = (value: string) => {
    if (isMultiStepMode && props.onProviderChange) {
      props.onProviderChange(value);
    } else if (props.setFormData) {
      props.setFormData({ ...formData, provider: value, model: '' });
    }
  };
  
  const updateModel = (value: string) => {
    if (isMultiStepMode && props.onModelChange) {
      props.onModelChange(value);
    } else if (props.setFormData) {
      props.setFormData({ ...formData, model: value });
    }
  };
  
  const updateTemperature = (value: number) => {
    if (isMultiStepMode && props.onTemperatureChange) {
      props.onTemperatureChange(value);
    } else if (props.setFormData) {
      props.setFormData({ ...formData, temperature: value });
    }
  };
  
  const updateMaxTokens = (value: number) => {
    if (isMultiStepMode && props.onMaxTokensChange) {
      props.onMaxTokensChange(value);
    } else if (props.setFormData) {
      props.setFormData({ ...formData, maxTokens: value });
    }
  };
  
  const updateAdvancedSettings = (settings: any) => {
    if (isMultiStepMode && props.onAdvancedSettingsChange) {
      props.onAdvancedSettingsChange(settings);
    } else if (props.setFormData) {
      props.setFormData({ ...formData, ...settings });
    }
  };
  // Status dos provedores
  const { data: status = {} } = useQuery({
    queryKey: ['/api/ai-providers/status'],
    staleTime: 60000,
  });

  // Modelos disponíveis
  const { data: allModels = [] } = useQuery({
    queryKey: ['/api/ai-providers/models'],
    staleTime: 5 * 60 * 1000,
  });

  // Coleções da base de conhecimento
  const { data: collections = [] } = useQuery({
    queryKey: ['/api/knowledge-base/collections'],
    staleTime: 60000,
  });

  const availableModels = allModels.filter((m: any) => m.provider === formData.provider);
  const selectedModel = availableModels.find((m: any) => m.model === formData.model);
  const supportsTemperature = !['o3', 'o4-mini', 'o3-mini'].includes(formData.model);
  const isReasoningModel = ['o3', 'o4-mini', 'o3-mini'].includes(formData.model);

  // Set default values when provider/model changes
  useEffect(() => {
    if (isReasoningModel) {
      updateAdvancedSettings({
        enableCodeInterpreter: false,
        enableRetrieval: false,
        selectedCollections: []
      });
    }
  }, [formData.model]);

  return (
    <div className="space-y-6">
      {/* Provedor de IA */}
      <div>
        <Label htmlFor="provider">Provedor de IA</Label>
        <Select value={formData.provider} onValueChange={updateProvider}>
          <SelectTrigger>
            <SelectValue placeholder="Selecione um provedor" />
          </SelectTrigger>
          <SelectContent>
            {PROVIDERS.map((provider) => (
              <SelectItem key={provider.value} value={provider.value}>
                <div className="flex items-center gap-2">
                  <span>{provider.icon}</span>
                  <span>{provider.label}</span>
                  {!status[provider.value] && (
                    <Badge variant="destructive" className="ml-2 text-xs">
                      Não configurado
                    </Badge>
                  )}
                </div>
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>

      {/* Modelo */}
      <div>
        <Label htmlFor="model">Modelo</Label>
        <Select 
          value={formData.model} 
          onValueChange={(value) => {
            const isReasoningModel = ['o3', 'o4-mini', 'o3-mini'].includes(value);
            updateModel(value);
            if (isReasoningModel) {
              updateAdvancedSettings({
                enableCodeInterpreter: false,
                enableRetrieval: false,
                selectedCollections: []
              });
            }
          }}
          disabled={!formData.provider || availableModels.length === 0}
        >
          <SelectTrigger>
            <SelectValue placeholder="Selecione um modelo" />
          </SelectTrigger>
          <SelectContent>
            {availableModels.map((model: any) => (
              <SelectItem key={model.model} value={model.model}>
                <div className="flex items-center justify-between w-full">
                  <div className="flex items-center gap-2">
                    <span>{model.model}</span>
                    {model.recommended && (
                      <Badge className="text-xs bg-blue-100 text-blue-800 border-blue-200">
                        Recomendado
                      </Badge>
                    )}
                  </div>
                  {!compact && (
                    <div className="flex items-center gap-2 ml-4">
                      <span className="text-xs text-gray-500">
                        {model.maxTokens.toLocaleString()} tokens
                      </span>
                      <span className="text-xs text-green-600">
                        ${((model.inputCostPer1M + model.outputCostPer1M) / 1000).toFixed(3)}/1K
                      </span>
                    </div>
                  )}
                </div>
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>

      {/* Temperatura */}
      <div className="space-y-2">
        <Label htmlFor="temperature" className={!supportsTemperature ? "text-muted-foreground" : ""}>
          Temperatura ({typeof formData.temperature === 'number' ? formData.temperature.toFixed(2) : formData.temperature})
          {!supportsTemperature && <span className="text-xs ml-2">(Não disponível para este modelo)</span>}
        </Label>
        <div className="px-4">
          <Slider
            id="temperature"
            min={0}
            max={2}
            step={0.1}
            value={[formData.temperature]}
            onValueChange={(value) => updateTemperature(value[0])}
            className={`w-full ${!supportsTemperature ? "opacity-50 pointer-events-none" : ""}`}
            disabled={!supportsTemperature}
          />
          <div className="flex justify-between text-xs text-muted-foreground mt-1">
            <span>0 = mais conservador, 2 = mais criativo</span>
          </div>
        </div>
      </div>

      {/* Máximo de Tokens */}
      <div>
        <Label htmlFor="maxTokens">Máximo de Tokens</Label>
        <div className="text-sm text-gray-500 mb-2">
          Limite de tokens para resposta
          {selectedModel && (
            <span className="text-xs ml-2">
              (máximo: {selectedModel.maxTokens.toLocaleString()})
            </span>
          )}
        </div>
        <Input
          id="maxTokens"
          type="number"
          min="1"
          max={selectedModel?.maxTokens || 256000}
          value={formData.maxTokens}
          onChange={(e) => updateMaxTokens(parseInt(e.target.value) || 1000)}
          className="w-full"
        />
      </div>

      {/* Grok-specific Features */}
      {formData.provider === 'xai' && (
        <div className="space-y-6 p-4 border rounded-lg bg-indigo-50 border-indigo-200">
          <div className="flex items-center gap-2 mb-4">
            <span className="text-xl">🧪</span>
            <h3 className="text-lg font-semibold text-indigo-800">Funcionalidades Especiais do Grok</h3>
          </div>

          {/* Reasoning Level */}
          <div className="space-y-3">
            <div className="flex items-center gap-2">
              <Brain className="h-4 w-4 text-indigo-600" />
              <Label className="text-indigo-800 font-medium">
                Nível de Raciocínio (Think Level)
              </Label>
            </div>
            <p className="text-sm text-indigo-600">
              Controla a profundidade do raciocínio do modelo. "High" gera respostas mais detalhadas e reflexivas.
            </p>
            <Select 
              value={formData.reasoningLevel} 
              onValueChange={(value) => setFormData({ ...formData, reasoningLevel: value })}
            >
              <SelectTrigger className="w-full">
                <SelectValue placeholder="Selecione o nível" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="disabled">
                  <div className="flex items-center gap-2">
                    <span>⚪ Desabilitado</span>
                  </div>
                </SelectItem>
                <SelectItem value="low">
                  <div className="flex items-center gap-2">
                    <span>🔸 Low (Rápido)</span>
                  </div>
                </SelectItem>
                <SelectItem value="high">
                  <div className="flex items-center gap-2">
                    <span>🔹 High (Profundo)</span>
                  </div>
                </SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Live Search */}
          <div className="space-y-3">
            <div className="flex items-center gap-2">
              <Search className="h-4 w-4 text-indigo-600" />
              <Label className="text-indigo-800 font-medium">
                Busca em Tempo Real
              </Label>
            </div>
            <p className="text-sm text-indigo-600">
              Permite que o modelo busque informações atuais na web durante a geração de respostas.
            </p>
            <div className="flex items-center space-x-2">
              <Switch
                id="enableSearch"
                checked={formData.enableSearch}
                onCheckedChange={(checked) => setFormData({ ...formData, enableSearch: checked })}
              />
              <Label htmlFor="enableSearch" className="text-sm">
                Habilitar busca ao vivo
              </Label>
            </div>
          </div>

          {/* Image Understanding */}
          <div className="space-y-3">
            <div className="flex items-center gap-2">
              <Eye className="h-4 w-4 text-indigo-600" />
              <Label className="text-indigo-800 font-medium">
                Compreensão de Imagens
              </Label>
            </div>
            <p className="text-sm text-indigo-600">
              Habilita análise e descrição detalhada de imagens enviadas para o modelo.
            </p>
            <div className="flex items-center space-x-2">
              <Switch
                id="enableImageUnderstanding"
                checked={formData.enableImageUnderstanding}
                onCheckedChange={(checked) => setFormData({ ...formData, enableImageUnderstanding: checked })}
              />
              <Label htmlFor="enableImageUnderstanding" className="text-sm">
                Habilitar compreensão de imagens
              </Label>
            </div>
          </div>
        </div>
      )}

      {/* OpenAI-specific Features */}
      {formData.provider === 'openai' && (
        <div className="space-y-6 p-4 border rounded-lg bg-green-50 border-green-200">
          <div className="flex items-center gap-2 mb-4">
            <span className="text-xl">🤖</span>
            <h3 className="text-lg font-semibold text-green-800">Funcionalidades Avançadas OpenAI</h3>
          </div>

          {/* Reasoning Mode (for o3/o4-mini models) */}
          {isReasoningModel && (
            <div className="space-y-3">
              <div className="flex items-center gap-2">
                <Brain className="h-4 w-4 text-green-600" />
                <Label className="text-green-800 font-medium">
                  Modo de Raciocínio
                </Label>
                <Badge className="bg-yellow-100 text-yellow-800 border-yellow-200">
                  {formData.model} - Reasoning Model
                </Badge>
              </div>
              <p className="text-sm text-green-600">
                Este modelo usa raciocínio avançado step-by-step. O reasoning_effort controla a profundidade do raciocínio.
              </p>
              <Select 
                value={formData.reasoning_effort || 'medium'} 
                onValueChange={(value) => setFormData({ ...formData, reasoning_effort: value })}
              >
                <SelectTrigger className="w-full">
                  <SelectValue placeholder="Selecione o esforço de raciocínio" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="low">
                    <div className="flex items-center gap-2">
                      <span>🟢 Low - Raciocínio básico</span>
                    </div>
                  </SelectItem>
                  <SelectItem value="medium">
                    <div className="flex items-center gap-2">
                      <span>🟡 Medium - Raciocínio balanceado</span>
                    </div>
                  </SelectItem>
                  <SelectItem value="high">
                    <div className="flex items-center gap-2">
                      <span>🔴 High - Raciocínio profundo</span>
                    </div>
                  </SelectItem>
                </SelectContent>
              </Select>
            </div>
          )}

          {/* Response Format */}
          <div className="space-y-3">
            <Label className="text-green-800 font-medium">Formato de Resposta</Label>
            <p className="text-sm text-green-600">
              Controla o formato de saída da resposta. JSON Object força respostas estruturadas.
            </p>
            <Select 
              value={formData.responseFormat || 'text'} 
              onValueChange={(value) => setFormData({ ...formData, responseFormat: value })}
            >
              <SelectTrigger className="w-full">
                <SelectValue placeholder="Selecione o formato" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="text">Texto Normal</SelectItem>
                <SelectItem value="json_object">JSON Object</SelectItem>
                <SelectItem value="json_schema">JSON Schema</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Tools/Functions - Hidden for reasoning models */}
          {!isReasoningModel && (
            <div className="space-y-3">
              <Label className="text-green-800 font-medium">Tools & Functions</Label>
              <p className="text-sm text-green-600">
                Habilita ferramentas especiais para o modelo executar tarefas específicas.
              </p>
              <div className="space-y-2">
                <div className="flex items-center space-x-2">
                  <Switch
                    id="enableCodeInterpreter"
                    checked={formData.enableCodeInterpreter}
                    onCheckedChange={(checked) => setFormData({ ...formData, enableCodeInterpreter: checked })}
                  />
                  <Label htmlFor="enableCodeInterpreter" className="text-sm">
                    Code Interpreter (execução de Python)
                  </Label>
                </div>
                <div className="flex items-center space-x-2">
                  <Switch
                    id="enableRetrieval"
                    checked={formData.enableRetrieval}
                    onCheckedChange={(checked) => setFormData({ ...formData, enableRetrieval: checked })}
                  />
                  <Label htmlFor="enableRetrieval" className="text-sm">
                    Retrieval (busca em documentos)
                  </Label>
                </div>
              </div>

              {/* Collection selector when retrieval is enabled */}
              {formData.enableRetrieval && collections.length > 0 && (
                <div>
                  <Label htmlFor="collections" className="text-sm text-green-700">
                    Coleções da Base de Conhecimento
                  </Label>
                  <Select
                    value={formData.selectedCollections?.[0]?.toString() || "none"}
                    onValueChange={(value) => {
                      setFormData({
                        ...formData,
                        selectedCollections: value === "none" ? [] : [parseInt(value)]
                      });
                    }}
                  >
                    <SelectTrigger className="w-full">
                      <SelectValue placeholder="Selecione uma coleção" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="none">Nenhuma coleção selecionada</SelectItem>
                      {collections.map((collection: any) => (
                        <SelectItem key={collection.id} value={collection.id.toString()}>
                          {collection.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <p className="text-xs text-green-600 mt-1">
                    O modelo usará documentos desta coleção para enriquecer suas respostas
                  </p>
                </div>
              )}
            </div>
          )}

          {/* Advanced Parameters */}
          <div className="space-y-3">
            <Label className="text-green-800 font-medium">Parâmetros Avançados</Label>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <Label htmlFor="seed" className="text-sm">Seed</Label>
                <Input
                  id="seed"
                  type="number"
                  placeholder="Opcional"
                  value={formData.seed || ''}
                  onChange={(e) => setFormData({ ...formData, seed: e.target.value ? parseInt(e.target.value) : undefined })}
                />
                <p className="text-xs text-gray-500 mt-1">Resultados determinísticos</p>
              </div>
              <div>
                <Label htmlFor="top_p" className="text-sm">Top P</Label>
                <Input
                  id="top_p"
                  type="number"
                  step="0.1"
                  min="0"
                  max="1"
                  placeholder="Opcional"
                  value={formData.top_p || ''}
                  onChange={(e) => setFormData({ ...formData, top_p: e.target.value ? parseFloat(e.target.value) : undefined })}
                />
                <p className="text-xs text-gray-500 mt-1">Controle de criatividade</p>
              </div>
              <div>
                <Label htmlFor="frequency_penalty" className="text-sm">Frequency Penalty</Label>
                <Input
                  id="frequency_penalty"
                  type="number"
                  step="0.1"
                  min="-2"
                  max="2"
                  placeholder="Opcional"
                  value={formData.frequency_penalty || ''}
                  onChange={(e) => setFormData({ ...formData, frequency_penalty: e.target.value ? parseFloat(e.target.value) : undefined })}
                />
                <p className="text-xs text-gray-500 mt-1">Reduz repetições</p>
              </div>
              <div>
                <Label htmlFor="presence_penalty" className="text-sm">Presence Penalty</Label>
                <Input
                  id="presence_penalty"
                  type="number"
                  step="0.1"
                  min="-2"
                  max="2"
                  placeholder="Opcional"
                  value={formData.presence_penalty || ''}
                  onChange={(e) => setFormData({ ...formData, presence_penalty: e.target.value ? parseFloat(e.target.value) : undefined })}
                />
                <p className="text-xs text-gray-500 mt-1">Encoraja novos tópicos</p>
              </div>
            </div>
          </div>

          {/* Fine-tuned Models */}
          <div className="space-y-3">
            <Label className="text-green-800 font-medium">Fine-tuned Model</Label>
            <p className="text-sm text-green-600">
              Use um modelo fine-tuned personalizado treinado para sua tarefa específica.
            </p>
            <Input
              placeholder="Ex: ft:gpt-4o-mini:my-org:custom:id"
              value={formData.fineTuneModel || ''}
              onChange={(e) => setFormData({ ...formData, fineTuneModel: e.target.value })}
            />
          </div>
        </div>
      )}

      {/* Claude-specific Features */}
      {formData.provider === 'anthropic' && (
        <div className="space-y-6 p-4 border rounded-lg bg-purple-50 border-purple-200">
          <div className="flex items-center gap-2 mb-4">
            <span className="text-xl">🧠</span>
            <h3 className="text-lg font-semibold text-purple-800">Funcionalidades Especiais do Claude</h3>
          </div>

          {/* Extended Thinking */}
          <div className="space-y-3">
            <div className="flex items-center gap-2">
              <Brain className="h-4 w-4 text-purple-600" />
              <Label className="text-purple-800 font-medium">
                Extended Thinking (Raciocínio Estendido)
              </Label>
            </div>
            <p className="text-sm text-purple-600">
              Permite que Claude pense profundamente antes de responder. Ideal para problemas complexos.
            </p>
            
            {/* Check if model supports Extended Thinking */}
            {['claude-opus-4-20250514', 'claude-sonnet-4-20250514', 'claude-3-7-sonnet-20250219'].includes(formData.model) ? (
              <>
                <div className="flex items-center space-x-2">
                  <Switch
                    id="enableExtendedThinking"
                    checked={formData.enableExtendedThinking}
                    onCheckedChange={(checked) => setFormData({ ...formData, enableExtendedThinking: checked })}
                  />
                  <Label htmlFor="enableExtendedThinking" className="text-sm">
                    Habilitar Extended Thinking
                  </Label>
                </div>

                {formData.enableExtendedThinking && (
                  <div>
                    <Label htmlFor="thinkingBudgetTokens" className="text-sm">
                      Budget de Tokens para Raciocínio
                    </Label>
                    <div className="px-4">
                      <Slider
                        id="thinkingBudgetTokens"
                        min={1000}
                        max={50000}
                        step={1000}
                        value={[formData.thinkingBudgetTokens || 10000]}
                        onValueChange={(value) => 
                          setFormData({ ...formData, thinkingBudgetTokens: value[0] })
                        }
                        className="w-full"
                      />
                      <div className="flex justify-between text-xs text-muted-foreground mt-1">
                        <span>{(formData.thinkingBudgetTokens || 10000).toLocaleString()} tokens</span>
                        <span>Recomendado: 10K-20K para problemas complexos</span>
                      </div>
                    </div>
                  </div>
                )}
              </>
            ) : (
              <Alert className="bg-purple-100 border-purple-200">
                <AlertTriangle className="h-4 w-4 text-purple-600" />
                <AlertDescription className="text-sm text-purple-700">
                  Extended Thinking está disponível apenas para:
                  <ul className="list-disc list-inside mt-1">
                    <li>claude-opus-4-20250514</li>
                    <li>claude-sonnet-4-20250514</li>
                    <li>claude-3-7-sonnet-20250219</li>
                  </ul>
                </AlertDescription>
              </Alert>
            )}
          </div>
        </div>
      )}
    </div>
  );
}