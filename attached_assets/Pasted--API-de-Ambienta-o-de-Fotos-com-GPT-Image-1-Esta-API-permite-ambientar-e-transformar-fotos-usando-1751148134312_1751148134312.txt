# API de Ambienta√ß√£o de Fotos com GPT Image 1

Esta API permite ambientar e transformar fotos usando o modelo GPT Image 1 da OpenAI. Voc√™ pode enviar uma foto e uma descri√ß√£o do ambiente desejado, e a API retornar√° a foto transformada.

## üöÄ Funcionalidades

- **Ambienta√ß√£o de fotos**: Transforme o cen√°rio de suas fotos
- **M√∫ltiplas op√ß√µes de qualidade**: Baixa, m√©dia, alta ou autom√°tica
- **Diferentes tamanhos**: Quadrado, paisagem ou retrato
- **Interface web intuitiva**: Teste a API diretamente no navegador
- **Exemplos de prompts**: Sugest√µes para obter melhores resultados

## üìã Pr√©-requisitos

- Python 3.11+
- Chave API da OpenAI com acesso ao modelo GPT Image 1
- Organiza√ß√£o verificada na OpenAI (necess√°rio para GPT Image 1)

## üõ†Ô∏è Instala√ß√£o

1. **Clone ou baixe o projeto**
2. **Configure a chave API da OpenAI**:
   ```bash
   export OPENAI_API_KEY=sua_chave_api_aqui
   ```

3. **Instale as depend√™ncias**:
   ```bash
   cd photo_ambience_api
   source venv/bin/activate
   pip install -r requirements.txt
   ```

4. **Execute a aplica√ß√£o**:
   ```bash
   python src/main.py
   ```

5. **Acesse a aplica√ß√£o**:
   - Interface web: http://localhost:5000/photo_ambience.html
   - API: http://localhost:5000/api/

## üìö Endpoints da API

### 1. Status da API
```
GET /api/status
```
Retorna o status atual da API e suas funcionalidades.

**Resposta:**
```json
{
  "status": "ativo",
  "modelo": "gpt-image-1",
  "funcionalidades": [
    "ambientacao_de_fotos",
    "edicao_de_imagens",
    "transformacao_de_cenarios"
  ]
}
```

### 2. Ambientar Foto
```
POST /api/ambientar-foto
```
Transforma uma foto aplicando o ambiente descrito no prompt.

**Par√¢metros:**
```json
{
  "image": "base64_da_imagem",
  "prompt": "Descri√ß√£o do ambiente desejado",
  "quality": "high|medium|low|auto",
  "size": "1024x1024|1536x1024|1024x1536",
  "output_format": "jpeg|png|webp"
}
```

**Resposta de sucesso:**
```json
{
  "success": true,
  "image": "base64_da_imagem_transformada",
  "prompt_usado": "Prompt utilizado",
  "parametros": {
    "quality": "high",
    "size": "1024x1024",
    "output_format": "jpeg"
  }
}
```

**Resposta de erro:**
```json
{
  "error": "Descri√ß√£o do erro"
}
```

### 3. Exemplos de Prompts
```
GET /api/exemplos-prompts
```
Retorna exemplos de prompts organizados por categoria.

**Resposta:**
```json
{
  "exemplos": {
    "cenarios": ["Coloque esta pessoa em uma praia tropical...", "..."],
    "elementos": ["Adicione flores coloridas...", "..."],
    "estilos": ["Transforme em estilo aquarela...", "..."],
    "atmosfera": ["Adicione uma atmosfera misteriosa...", "..."]
  },
  "dicas": [
    "Seja espec√≠fico sobre o ambiente desejado",
    "Mencione cores, ilumina√ß√£o e elementos espec√≠ficos",
    "..."
  ]
}
```

## üí° Exemplos de Uso

### Usando cURL
```bash
# Verificar status
curl -X GET http://localhost:5000/api/status

# Ambientar foto (exemplo com imagem base64)
curl -X POST http://localhost:5000/api/ambientar-foto \
  -H "Content-Type: application/json" \
  -d '{
    "image": "iVBORw0KGgoAAAANSUhEUgAA...",
    "prompt": "Coloque esta pessoa em uma praia tropical ao p√¥r do sol",
    "quality": "high",
    "size": "1024x1024"
  }'
```

### Usando Python
```python
import requests
import base64

# Ler imagem e converter para base64
with open("minha_foto.jpg", "rb") as img_file:
    img_base64 = base64.b64encode(img_file.read()).decode()

# Fazer requisi√ß√£o
response = requests.post("http://localhost:5000/api/ambientar-foto", json={
    "image": img_base64,
    "prompt": "Transforme o fundo em uma floresta encantada com luzes m√°gicas",
    "quality": "high",
    "size": "1024x1024"
})

result = response.json()
if result.get("success"):
    # Salvar imagem resultante
    with open("foto_ambientada.jpg", "wb") as f:
        f.write(base64.b64decode(result["image"]))
```

## üé® Dicas para Melhores Resultados

### Prompts Eficazes
- **Seja espec√≠fico**: "praia tropical com palmeiras e p√¥r do sol dourado"
- **Inclua detalhes**: "n√©voa suave, ilumina√ß√£o dram√°tica, cores vibrantes"
- **Mencione estilo**: "estilo cinematogr√°fico", "aquarela art√≠stica"

### Exemplos de Prompts por Categoria

**Cen√°rios:**
- "Coloque esta pessoa em uma praia tropical ao p√¥r do sol"
- "Transforme o fundo em uma floresta encantada com luzes m√°gicas"
- "Adicione um ambiente urbano moderno com arranha-c√©us"

**Elementos:**
- "Adicione flores coloridas e borboletas ao redor"
- "Inclua chuva suave e gotas nas janelas"
- "Coloque fogos de artif√≠cio no c√©u noturno"

**Estilos:**
- "Transforme em estilo aquarela art√≠stica"
- "Aplique efeito de pintura a √≥leo cl√°ssica"
- "Converta para estilo cyberpunk futurista"

## ‚öôÔ∏è Configura√ß√µes

### Vari√°veis de Ambiente
- `OPENAI_API_KEY`: Sua chave API da OpenAI (obrigat√≥rio)
- `FLASK_ENV`: Ambiente de execu√ß√£o (development/production)

### Par√¢metros de Qualidade
- **high**: M√°xima qualidade, mais lento
- **medium**: Qualidade balanceada
- **low**: Processamento mais r√°pido
- **auto**: OpenAI escolhe automaticamente

### Tamanhos Suportados
- **1024x1024**: Formato quadrado
- **1536x1024**: Formato paisagem
- **1024x1536**: Formato retrato

## üîí Seguran√ßa

- A API usa as mesmas prote√ß√µes de seguran√ßa do ChatGPT
- Modera√ß√£o autom√°tica de conte√∫do
- Metadados C2PA inclu√≠dos nas imagens geradas
- Logs de auditoria para monitoramento

## üöÄ Deploy

Para fazer deploy da aplica√ß√£o:

1. **Configure as vari√°veis de ambiente no servidor**
2. **Instale as depend√™ncias**:
   ```bash
   pip install -r requirements.txt
   ```
3. **Execute em modo produ√ß√£o**:
   ```bash
   python src/main.py
   ```

## üìù Limita√ß√µes

- Requer chave API da OpenAI com acesso ao GPT Image 1
- Necessita verifica√ß√£o organizacional na OpenAI
- Tempo de processamento: 30-60 segundos por imagem
- Custo: $1 por mil imagens geradas
- Tamanhos de imagem limitados aos formatos suportados

## üÜò Solu√ß√£o de Problemas

### Erro: "Modelo n√£o encontrado"
- Verifique se sua organiza√ß√£o tem acesso ao GPT Image 1
- Confirme se a verifica√ß√£o organizacional foi conclu√≠da

### Erro: "Chave API inv√°lida"
- Verifique se a vari√°vel OPENAI_API_KEY est√° configurada
- Confirme se a chave tem permiss√µes adequadas

### Erro: "Imagem muito grande"
- Redimensione a imagem antes do envio
- Use formatos suportados (JPEG, PNG, WebP)

## üìû Suporte

Para d√∫vidas ou problemas:
1. Verifique a documenta√ß√£o da OpenAI
2. Consulte os logs da aplica√ß√£o
3. Teste com imagens menores primeiro

## üìÑ Licen√ßa

Este projeto √© fornecido como exemplo educacional. Consulte os termos de uso da OpenAI para uso comercial.

